<launch>

      <!-- Ardrone Autonomy node -->
      <!-- Subscribe to: -->
      <!-- cmd/vel -->
      <!-- Publish to: -->
      <!-- ardrone/bottom/image_raw -->
      <!-- ardrone/bottom/camera_info -->
      
      <!-- IPv4 address of your drone -->
      <arg name="ip" default="192.168.1.1" />
      <!-- Ultrasound frequency (7 or 8). -->
      <arg name="freq" default="8" />
      <node name="ardrone_driver" pkg="ardrone_autonomy" type="ardrone_driver"
            output="screen" clear_params="true" args="-ip $(arg ip)">
            <param name="outdoor" value="0" />
            <param name="max_bitrate" value="4000" />
            <param name="bitrate" value="4000" />
            <param name="navdata_demo" value="0" />
            <param name="flight_without_shell" value="0" />
            <param name="altitude_max" value="4000" />
            <param name="altitude_min" value="50" />
            <param name="euler_angle_max" value="0.21" />
            <param name="control_vz_max" value="700" />
            <param name="control_yaw" value="1.75" />
            <param name="detect_type" value="10" />
            <param name="enemy_colors" value="3" />
            <param name="detections_select_h" value="32" />
            <param name="detections_select_v_hsync" value="128" />
            <param name="enemy_without_shell" value="0" />
            <param name="ultrasound_freq" value="$(arg freq)" />
            <param name="realtime_navdata" value="true" />
            <param name="realtime_video" value="true" />
            <!-- Covariance Values (3x3 matrices reshaped to 1x9)-->
            <rosparam param="cov/imu_la">[0.1, 0.0, 0.0, 0.0, 0.1, 0.0, 0.0, 0.0, 0.1]</rosparam>
            <rosparam param="cov/imu_av">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0]</rosparam>
            <rosparam param="cov/imu_or">[1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 100000.0]</rosparam>
      </node>

      <node pkg="landing_pkg"
            name="ar_sys_listener"
            type="ar_sys_listener"
            output="screen"/>
            <!--N.B. type Ã¨ lo stesso di add_executable(ar_sys_listener src/ar_sys_listener.cpp) in CMakeLists.txt-->
            <!--N.B. ROS_INFO does not print without output=screen-->
      <!--<node pkg="cvg_sim_gazebo"
            name="cvg_sim_gazebo_node"
            type="cvg_sim_gazebo_node"/>-->


      <arg name="camera_enable" default="true"/>
	<arg name="camera_device" default="/dev/video0"/>
      <!--TODO Bring calibration file inside-->
	<arg name="camera_info" default="file://$(find landing_pkg)/camera_info/camera_calibration.yaml"/>
	<arg name="camera_frame_id" default="camera1"/>
	<arg name="camera_width" default="1280"/>
	<arg name="camera_height" default="1024" />
	<arg name="camera_fps"  default="30"/>

	<arg name="result_display" default="true"/>
	<arg name="result_autosize" default="true"/>
	<arg name="result_draw_markers" default="false" />
	<arg name="result_draw_markers_cube" default="false" />
	<arg name="result_draw_markers_axis" default="false" />

	<arg name="uid" default=""/>
	<arg name="video_namespace" default="/camera1"/>
	<arg name="video_image_topic" default="image_rect_color"/>
	<arg name="video_info_topic" default="camera_info"/>
	<arg name="video_rectified" default="true" />

	<arg name="board_config" default="$(find landing_pkg)/boards/board.yml" />
	<arg name="board_frame_id" default="board1" />
	<arg name="marker_size" default="0.05" />
      <arg name="publish_tf" default="false" />


	<group if="$(arg camera_enable)">
		<node ns="$(arg video_namespace)" pkg="image_proc" type="image_proc" name="image_proc$(arg uid)" />
		<node ns="$(arg video_namespace)" pkg="uvc_camera" type="uvc_camera_node" name="uvc_camera$(arg uid)" output="screen">
			<param name="width" type="int" value="$(arg camera_width)" />
			<param name="height" type="int" value="$(arg camera_height)" />
			<param name="fps" type="int" value="$(arg camera_fps)" />
			<param name="frame_id" type="string" value="/$(arg camera_frame_id)" />
			<param name="device" type="string" value="$(arg camera_device)" />
			<param name="camera_info_url" type="string" value="$(arg camera_info)" />
		</node>
	</group>

	<node ns="/" pkg="ar_sys" type="single_board" name="ar_single_board$(arg uid)" output="screen">
		<remap from="/camera_info" to="$(arg video_namespace)/$(arg video_info_topic)" />
		<remap from="/image" to="$(arg video_namespace)/$(arg video_image_topic)" />

		<param name="image_is_rectified" type="bool" value="$(arg video_rectified)"/>
		<param name="board_config" type="string" value="$(arg board_config)"/>
		<param name="board_frame" type="string" value="/$(arg board_frame_id)" />
		<param name="marker_size" type="double" value="$(arg marker_size)"/>
		<param name="draw_markers" type="bool" value="$(arg result_draw_markers)" />
		<param name="draw_markers_cube" type="bool" value="$(arg result_draw_markers_cube)" />
		<param name="draw_markers_axis" type="bool" value="$(arg result_draw_markers_axis)" />
        <param name="publish_tf" value="$(arg publish_tf)" />
	</node>

	<node ns="/" pkg="topic_tools" type="relay" name="ar_single_board_relay$(arg uid)" args="/ar_single_board$(arg uid)/transform /arsys_single_board/transform" />

	<group if="$(arg result_display)">
		<node ns="/" pkg="image_view" type="image_view" name="image_view$(arg uid)" output="screen">
			<remap from="image" to="/ar_single_board$(arg uid)/result" />

			<param name="autosize" type="bool" value="$(arg result_autosize)" />
		</node>
      </group>

      <!--Launch another .launch file eg possible for ar_sys single_board.launch -->
      <!--<include file="$(find ar_sys)/launch/single_board.launch">
      </include>-->



</launch>